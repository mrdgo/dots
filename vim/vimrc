set runtimepath^=~/.config/nvim runtimepath+=~/.config/nvim/after
let &packpath = &runtimepath

let myfiletypefile = "~/.config/nvim/filetypes.vim"

set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab
set hls is
set smartindent
set clipboard=unnamed
source ~/.config/nvim/ftplugins/java_getset.vim
set hidden

" UI
set number
set showcmd
set wildmenu
set lazyredraw
set cursorline
hi CursorLine   cterm=NONE ctermbg=8 ctermfg=NONE
hi Cursorline term=NONE cterm=NONE
hi LineNr ctermfg=grey

let mapleader = ";"
nnoremap <leader>h <C-w>h
nnoremap <leader>j <C-w>j
nnoremap <leader>k <C-w>k
nnoremap <leader>l <C-w>l

"nnoremap <leader>1 :b1<cr>
"nnoremap <leader>2 :b2<cr>
"nnoremap <leader>3 :b3<cr>
"nnoremap <leader>4 :b4<cr>
"nnoremap <leader>5 :b5<cr>
"nnoremap <leader>6 :b6<cr>
"nnoremap <leader>7 :b7<cr>
"nnoremap <leader>8 :b8<cr>
"nnoremap <leader>9 :b9<cr>

" SpaceVim nice ones
nnoremap <leader>fvc :e ~/.config/nvim/init.vim<cr>
nnoremap <leader>fvf :e ~/.config/nvim/autoload/defx_config.vim<cr>
nnoremap <leader>fvd :e ~/.config/nvim/autoload/denite_conf.vim<cr>
nnoremap <leader>w :w<cr>
nnoremap <leader>x :x<cr>
nnoremap <leader>q :q<cr>
nnoremap <leader>n :noh<cr>
nnoremap <leader>b :Denite buffer<cr>
nnoremap <leader>e :Defx<cr>
inoremap jk <Esc>

let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b = "\<Esc>[48:2;%lu;%lu;%lum"

let g:netrw_banner = 0
let g:netrw_liststyle = 3
let g:netrw_browse_split = 3
let g:netrw_altv = 1
let g:netrw_winsize = 15


" solid underscore
let &t_SI .= "\<Esc>[4 q"
" solid block
let &t_EI .= "\<Esc>[2 q"

" copy paste to other programs via buffer '+'
vnoremap <C-S-c> "+y
imap <C-v> <ESC>"+pi

let loaded_matchparen = 1

" Note: Skip initialization for vim-tiny or vim-small.
if 0 | endif

if &compatible
  set nocompatible               " Be iMproved
endif

if empty(glob('~/.config/nvim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.config/nvim/plugged')

Plug 'easymotion/vim-easymotion'
Plug 'xuhdev/vim-latex-live-preview', { 'for': 'tex' }
Plug 'jiangmiao/auto-pairs' " automatically close brackets
Plug 'luochen1990/rainbow' " differentiate bracket levels by color
Plug 'tpope/vim-endwise'
Plug 'godlygeek/tabular'
Plug 'plasticboy/vim-markdown'
Plug 'NLKNguyen/c-syntax.vim'
Plug 'morhetz/gruvbox'
Plug 'lervag/vimtex'
Plug 'vim-scripts/gnuplot-syntax-highlighting'
Plug 'Shougo/defx.nvim', { 'do': ':UpdateRemotePlugins' }
Plug 'Shougo/denite.nvim', { 'do': ':UpdateRemotePlugins' }
Plug 'vim-airline/vim-airline'
Plug 'Shougo/neomru.vim'

call plug#end()

let g:airline#extensions#tabline#enabled = 0
" let g:airline#extensions#tabline#left_sep = ' '
" let g:airline#extensions#tabline#left_alt_sep = '|'
" let g:airline#extensions#tabline#formatter = 'unique_tail'
" let g:airline#extensions#tabline#buffer_nr_show = 0

" Defx
source ~/.config/nvim/autoload/defx_config.vim
source ~/.config/nvim/autoload/denite_conf.vim

" Required:
filetype plugin indent on
syntax enable

set background=dark               " or light
colorscheme gruvbox
set laststatus=2

" transparent background
hi Normal guibg=NONE ctermbg=NONE

"""""""""""""" theme
let g:gruvbox_contrast_dark = 'hard'
let g:gruvbox_contrast_light = 'hard'
let g:gruvbox_termcolors = 256
let g:gruvbox_hls_cursor = 'green'

set termguicolors
nmap <leader>c :set invtermguicolors<cr>

"""""""""""""" easymotion
let g:EasyMotion_do_mapping = 0 " Disable default mappings

" define auto pairs
autocmd FileType java let b:AutoPairs = {'(':')', '[':']', '{':'}',"'":"'",'"':'"', "`":"`", '```':'```', '"""':'"""', "'''":"'''", '\w\zs<' : '>'}
autocmd FileType java inoremap sysout System.out.println();<ESC>hi

nmap <leader>jj <Plug>(easymotion-overwin-f)
nmap <leader>jJ <Plug>(easymotion-overwin-f2)

" Turn on case insensitive feature
let g:EasyMotion_smartcase = 1

" JK motions: Line motions
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)

nmap <leader>t /TODO<cr>

"""""""""""""" LATEX
let g:livepreview_previewer = 'zathura'

" Decide
let g:livepreview_engine = 'xelatex'
"let g:livepreview_engine = 'pdflatex'
"let g:tex_flavor = 'pdflatex'
let g:tex_flavor = 'xelatex'

" Navigating with guides
inoremap ,, <Esc>/<++><Enter>"_c4l
vnoremap ,, <Esc>/<++><Enter>"_c4l
map ,, <Esc>/<++><Enter>"_c4l
" Word count:
autocmd FileType tex map <F3> :w !detex \| wc -w<CR>
autocmd FileType tex inoremap <F3> <Esc>:w !detex \| wc -w<CR>
" Code snippets
autocmd FileType tex inoremap ,f \begin{frame}<Enter>\frametitle{}<Enter><Enter><++><Enter><Enter>\end{frame}<Enter><Enter><++><Esc>6kf}i
autocmd FileType tex inoremap ,c \cite{}<++><Esc>T{i
autocmd FileType tex inoremap ,e \begin{enumerate}<Enter><Enter>\end{enumerate}<Enter><Enter><++><Esc>3kA\item<Space>
autocmd FileType tex inoremap ,i \begin{itemize}<Enter><Enter>\end{itemize}<Enter><Enter><++><Esc>3kA\item<Space>
autocmd FileType tex inoremap ,m \item<Space>
autocmd FileType tex inoremap ,t \begin{tabular}<Enter><++><Enter>\end{tabular}<Enter><Enter><++><Esc>4kA{}<Esc>i
autocmd FileType tex inoremap ,s \section{}<Enter><Enter><++><Esc>2kf}i
autocmd FileType tex inoremap ,2s \subsection{}<Enter><Enter><++><Esc>2kf}i
autocmd FileType tex inoremap ,3s \subsubsection{}<Enter><Enter><++><Esc>2kf}i
